import { config } from "dotenv";
import { getDuckyAiTweets, saveMessageToDb } from "../../db/utils";
import { ducky, generatePrompt } from "../ducky/character";
import { generateClaudeResponse } from "../lib/anthropic";
import { getTwitterService } from "./";

if (!process.env.RAILWAY_ENVIRONMENT) {
  config();
}

// Mock database functions for test mode
const mockSaveMessageToDb = async (
  message: string,
  speaker: string,
  delay: number
) => {
  console.log("TEST MODE - Would save to DB:", { message, speaker, delay });
};

const mockGetDuckyAiTweets = async () => {
  console.log("TEST MODE - Would get recent tweets");
  return [{ content: "Test tweet 1" }, { content: "Test tweet 2" }];
};

export const generateTweetClaude = async (): Promise<string> => {
  const recentTweets =
    process.env.TEST_MODE === "true"
      ? await mockGetDuckyAiTweets()
      : await getDuckyAiTweets();

  const tweetContents = recentTweets.map((tweet) => tweet.content);

  if (process.env.TEST_MODE === "true") {
    console.log(
      "TEST MODE - Would generate Claude response for:",
      tweetContents
    );
    return "This is a test tweet generated by Claude";
  }

  return await generateClaudeResponse(
    generatePrompt.forTweet(tweetContents),
    ducky.prompts.tweet.user
  );
};

export const tweetJob = async (): Promise<void> => {
  const dbSave =
    process.env.TEST_MODE === "true" ? mockSaveMessageToDb : saveMessageToDb;

  try {
    console.log("Starting Ducky tweet job");
    await dbSave(
      "Goal: Generate a tweet to grow my follower count",
      "System",
      0
    );

    const content = await generateTweetClaude();
    console.log("Generated tweet:", content);

    const twitterService = await getTwitterService();
    const response = await twitterService.sendTweet(content);

    if (response.success && response.url) {
      await dbSave(
        `\n-------------- Tweet Posted:\n\n${response.url}\n\n ---------------------`,
        "System",
        0
      );
    } else {
      throw new Error(response.error || "Failed to post tweet");
    }
  } catch (error) {
    console.error("Error in tweet job:", error);
    await dbSave(`Error in tweet job: ${error}`, "System", 0);
    throw error;
  }
};

tweetJob().catch(console.error);
